하루 10분 c++

====================
const 제한자와 데이터형 변환
====================

상수 선언
#define PIE 3.141592 // c 
-> const float PIE 3.141592; //c++

PIE =10 // 불가

데이터형 변환
typeName(a) = (typeName)a

char ch = 'M';
cout << (int)ch << "  " << int(ch) << endl; // 77 77
cout << static_cast<int>(ch) << endl; // 77


====================
C++ 산술연산자와 auto
====================
>>(몫)
%(나머지)

데이터형 auto
auto x = 0.0; // float
float y =0;
auto z = 0; // int

====================
배열과 문자열
====================

short month[12]; // 선언 (12개의 short형 데이터 저장가능)

short month[12] = { 1, 2, 3 };
cout << month[1] << endl;

char a[] = "Hello" // 큰따옴표에는 null값이 포함
cout << a << endl;


====================
사용자 입력과 string
====================
cin.getline(name1, Size) //whitespace 적용가능
= cin.get(name1, Size) 

string(복합데이터형)
char char1[20];
char char2[20] = 'jauar';
string str1;
string str2 = "panda";
// char1 = char2; // 틀림(통째로 값을 대입할 수 없다.)
str1 = str2; // 통째로 값을 대입할 수 있다.

====================
구조체
====================

구조체 : 다른 데이터형이 허용되는 데이터의 집합
배열 :  같은 데이터형의 집합

struct MyStruct
{
	string name;
	string position;
	int heght;
	int weight;
};


MyStruct A = {
 	"Son"
	"Striker",
	183,
	77
};

====================
공용체와 열거체
====================
union (공용체): 서로 다른 데이터형을 한번에 한가지만 보관가능

union MyUnion
{
	int intVal;
	long longVal;
	float floatVal;
}

enum(열거체) : 기호 상수를 만드는 것에 대한 또다른 방법

enum spectrum {red, orange, green};

0에서부터 2까지 정수값을 각각 나타내는 기호 상수로 만듦

spectrum a;
열거자 간에 산술연산은 허용x


int b;
b = blue
b = blue+3




====================
포인터와 메모리 해제
====================
int *a; // c 스타일
-> int* a; // c++ 스타일
int* c,d // c는 포인터 변수, d는 int형 변수

증가연산자, 감소연산자






====================
반복문의 활용
====================

int a[5] = { 1, 3, 5, 7, 9 }

// 중첩루프 : 2차원 배열
int temp[4][5];




====================
if 구문과 if else 구문
====================
if (true)
	cout << "조건이 참입니다.",
if (false)
	cout << "조건이 거짓입니다.";



if (true){
	cout 
	cout <<endl;

else {
}

if (false)
else if (true)
else 




====================
논리 표현식
====================

논리합(|| = or), 논리곱(&& = and), 논리부정 연산자(! = not )


====================
switch 구문과 break continue 구문
====================

switch (a)
{
case 1:
	cout << " 
	break;

case 2:
	cout << " 
	break;

defalut:
	cout
	break;
}



====================
함수의 기초
====================



리턴값이 있는 타입
리턴값이 없는 타입





파라미터 : 함수의 특성을 나타내는 매개변수 
void helloCPP(int, int); //파라미터
int main() {
	helloCPP(times, times2) //전달인자, 아규먼트
	return 0;
}

void helloCPP(int n, int m) { //
}



====================
함수와 배열
====================





====================
함수와 구조체
====================

struct Time //구조체
{
	int hours; // 멤버
	int mins; // 멤버
};

 
Time sum(Time* t1, Time* t2) { // 매개변수가 구조체가 아닌 포인터변수 
	Time total;

	// 구조체.멤버 불가 간접멤버연산자(->)
	// 값에서 멤버로 접근할때 : .
	// 주소에서 멤버로 접근할때 : 간접멤버연산자(->) 
	total.mins = (t1->mins + t2->mins) % minsPerHr;
	total.hours = t1->hours + t2->hours +
			(t1->mins + t2->mins) / minsPerHr;

	return total;



====================
재귀함수와 함수를 지시하는 포인터
====================

재귀
int main() {
void recurs(agumentList){
	if (condumentList

)



함수의 주소 얻는법
int main(){
	cout << func << endl;
	return 0;
}

int func(int n){
	return n+1;
}




====================
인라인 함수와 디폴트 매개변수
====================
인라인 함수 : 프로그램의 실행속도를 높이기 위해 필요
inline float square(float x) {return x*x}

디폴트 매개변수: 매개변수가 없을때 대신 사용
 
int sumArr(int*, int n=1);
 


====================
함수 템플릿
====================

// class 혹은 typeName
template <class Any>




====================
분할 컴파일
====================
 
구조체 정의
함수의 원형 정의
=> 헤더파일(1. 함수 원형 2. #define이나 const를 사용하는 기호상수
3. 구조체 선언 4. 클래스 선언 5. 템플릿 선언 6. 인라인 함수)

구조체와 함수를 사용하는 main함수 사용

함수의 몸체 정의




















































































































